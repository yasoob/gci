<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Yasoob Khalid</title>
    <link>http://yasoob.github.io/gci/post/</link>
    <description>Recent content in Posts on Yasoob Khalid</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Dec 2015 01:11:10 +0500</lastBuildDate>
    <atom:link href="http://yasoob.github.io/gci/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting Started with Hugo on Ubuntu 14.04</title>
      <link>http://yasoob.github.io/gci/post/installing%20hugo/</link>
      <pubDate>Wed, 30 Dec 2015 01:11:10 +0500</pubDate>
      
      <guid>http://yasoob.github.io/gci/post/installing%20hugo/</guid>
      <description>&lt;p&gt;Hugo is a static website generator which is written using golang. It is extremely fast and lightweight. You can use it to create a blog or full blown away corporate website. In this post I will show you how you can deploy a blog made with Hugo to GitHub pages. Let&amp;rsquo;s start!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Download the binary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first step is to download the Hugo binary for your platform from GitHub. I will be downloading binaries for 64bit linux as that is what I am using right now. Your system might be 32 bit so kindly keep that in mind. The download link is &lt;a href=&#34;https://github.com/spf13/hugo/releases/download/v0.15/hugo_0.15_linux_amd64.tar.gz&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Extract it in &lt;code&gt;dev&lt;/code&gt; folder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I like to save all of my development related stuff in a separate &lt;code&gt;dev&lt;/code&gt; folder in my home. You can easily create this dev folder using the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir ~/dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go ahead and extract the hugo files in this folder. If you are done with this step then move on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.Setting up an alias&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s time to setup and alias for hugo. Currently we can call hugo from any folder by running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ~/dev/hugo_0.15_linux_amd64/hugo_0.15_linux_amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see the above command is not very user friendly. We are going to change it. Open up your &lt;code&gt;.bashrc&lt;/code&gt; file using your editor of choice:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nano ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the following text at the end of this file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias hugo=&#39;~/dev/hugo_0.15_linux_amd64/hugo_0.15_linux_amd64&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After saving the file type the following command in your terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This updates your terminal session according to your &lt;code&gt;.bashrc&lt;/code&gt; file so that you don&amp;rsquo;t have to restart the terminal for the changes to take effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.Actually creating the new blog&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now hop over to your Desktop and create a new site/blog using the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/Desktop
$ hugo new site new_site
$ cd new_site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above command creates a new website in a &lt;code&gt;new_site&lt;/code&gt; folder in your Desktop and &lt;code&gt;cd&lt;/code&gt;s you into that folder. Now it&amp;rsquo;s time to create a new page for our website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.Creating &lt;code&gt;about.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Type the following command in your terminal to create a new &lt;code&gt;about.md&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can edit the file using your editor of choice. The above file will be created inside the &lt;code&gt;content&lt;/code&gt; folder. Just add valid markdown after the &lt;code&gt;+++&lt;/code&gt; in the &lt;code&gt;about.md&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.Create a new post&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A blog is not complete with a blogpost. You can easily create one by typing the following command in your terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/first.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can edit the post in your editor of choice. The post will be created in the &lt;code&gt;content -&amp;gt; post&lt;/code&gt; folder. After you have edited the file, save it and continue with the next step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.Getting the themes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Currently we don&amp;rsquo;t have any fancy themes. We can change that by cloning the &lt;code&gt;themes&lt;/code&gt; repo. It can easily be done by keying in the following command in your terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone --depth 1 --recursive https://github.com/spf13/hugoThemes.git themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can test various themes by typing the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server --theme=hyde --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will generate your blog and you can view it on &lt;code&gt;localhost:1313&lt;/code&gt;. Just change the &amp;ndash;theme flag to test various themes.&lt;/p&gt;

&lt;p&gt;Now we are ready to actually push our blog to GitHub.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8.Building the blog&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all we need to edit the &lt;code&gt;config.toml&lt;/code&gt; file. Add the following information in it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://yasoob.github.io/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;Yasoob Khalid&amp;quot;
author = &amp;quot;yasoob&amp;quot;
theme = &amp;quot;hugo-zen&amp;quot;

[params]
  logo      = &amp;quot;/images/logo.jpg&amp;quot;
  copyright = &amp;quot;Yasoob. All rights reserved.&amp;quot;
  twitter   = &amp;quot;https://twitter.com/yasoobkhalid&amp;quot;
  facebook  = &amp;quot;https://www.facebook.com/m.yasoob&amp;quot;
  github    = &amp;quot;https://github.com/yasoob/&amp;quot;
  email     = &amp;quot;yasoob.khld@gmail.com&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace the above variables with your own info. Now type this command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will generate your blog inside a &lt;code&gt;public&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9.Setup a new repo on GitHub&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Make a git repository in the public folder and commit all the changes. You can easily do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd public
$ git init .
$ git add .
$ git commit -m &amp;quot;created my awesome hugo blog&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now goto GitHub and create a new repo. We will name it &lt;code&gt;yasoob.github.io&lt;/code&gt; for the sake of this tutorial. After that we will add a remote in our repository.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote add origin git@github.com:yasoob/yasoob.github.io.git
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;10.Test it out!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now you can browse to the newly published blog. You can find it at the following url &lt;code&gt;&amp;lt;github_username&amp;gt;.github.io/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing Wine 1.8 on Ubuntu 14.04</title>
      <link>http://yasoob.github.io/gci/post/wine1.8%20ubuntu/</link>
      <pubDate>Tue, 29 Dec 2015 02:38:37 +0500</pubDate>
      
      <guid>http://yasoob.github.io/gci/post/wine1.8%20ubuntu/</guid>
      <description>

&lt;p&gt;Wine is a Compatibility layer for running windows applications on Linux and Mac OSX. Instead of simulating internal Windows logic like a virtual machine or emulator, Wine translates Windows API calls into POSIX calls on-the-fly.&lt;/p&gt;

&lt;p&gt;In this post I will show you how you can install Wine on Ubuntu 14.04. It is really easy to install it. We will be doing most of our work on the command-line using &lt;code&gt;apt&lt;/code&gt;. It is the best and easiest way to add &lt;code&gt;ppa&lt;/code&gt;s and install &lt;code&gt;pakages&lt;/code&gt; in linux.&lt;/p&gt;

&lt;h2 id=&#34;adding-the-ppa:a312123215a2f39fcfdf0a1148149d1d&#34;&gt;Adding the PPA:&lt;/h2&gt;

&lt;p&gt;The first step is to add the &lt;code&gt;ppa&lt;/code&gt; to your system. You can easily do this by running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:ubuntu-wine/ppa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://imgur.com/tz215JA.png&#34; alt=&#34;adding the ppa&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;update-the-packages-list:a312123215a2f39fcfdf0a1148149d1d&#34;&gt;Update the packages list:&lt;/h2&gt;

&lt;p&gt;Now we need to update the packages list. We can do that easily as well. Just type in the following command in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://imgur.com/DsOIFXv.png&#34; alt=&#34;updating&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;installing-wine:a312123215a2f39fcfdf0a1148149d1d&#34;&gt;Installing Wine:&lt;/h2&gt;

&lt;p&gt;Now we are on the last step. In this step we will install wine itself. Just type the following commands in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install wine1.8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Checkout this Asciinema cast which I recently made to showcase the whole installation procedure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://asciinema.org/a/32603.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There you go! Wine is installed! :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Virtual Environment</title>
      <link>http://yasoob.github.io/gci/post/virtualenv/</link>
      <pubDate>Sat, 26 Dec 2015 02:41:53 +0500</pubDate>
      
      <guid>http://yasoob.github.io/gci/post/virtualenv/</guid>
      <description>

&lt;p&gt;Have you ever heard of &lt;code&gt;virtualenv&lt;/code&gt;? If you are a beginner,
then you might not have heard about it but if you are a
seasoned programmer then it may well be a vital part of your toolset.&lt;/p&gt;

&lt;p&gt;So what is &lt;code&gt;virtualenv&lt;/code&gt;? &lt;code&gt;Virtualenv&lt;/code&gt; is a tool which allows us to
make isolated python environments. Imagine you have an application that
needs version 2 of a library, but another application requires
version 3. How can you use and develop both these applications?&lt;/p&gt;

&lt;p&gt;If you install everything into &lt;code&gt;/usr/lib/python2.7/site-packages&lt;/code&gt; (or
whatever your platform&amp;rsquo;s standard location is), it&amp;rsquo;s easy to end up in a
situation where you unintentionally upgrade a package.&lt;/p&gt;

&lt;p&gt;In another case, imagine that you have an application which is fully
developed and you do not want to make any change to the libraries it is
using but at the same time you start developing another application
which requires the updated versions of those libraries.&lt;/p&gt;

&lt;p&gt;What will you do? Use &lt;code&gt;virtualenv&lt;/code&gt;! It creates isolated environments
for your python application and allows you to install Python libraries
in that isolated environment instead of installing them globally.&lt;/p&gt;

&lt;p&gt;To install it, just type this command in the shell:&lt;/p&gt;

&lt;p&gt;.. code:: python&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most important commands are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ virtualenv myproject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ source bin/activate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This first one makes an isolated virtualenv environment in the
&lt;code&gt;myproject&lt;/code&gt; folder and the second command activates that isolated
environment.&lt;/p&gt;

&lt;p&gt;While creating the virtualenv you have to make a decision. Do you
want this virtualenv to use packages from your system &lt;code&gt;site-packages&lt;/code&gt;
or install them in the virtualenv’s site-packages? By default,
virtualenv will not give access to the global &lt;code&gt;site-packages&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want your &lt;code&gt;virtualenv&lt;/code&gt; to have access to your systems
&lt;code&gt;site-packages&lt;/code&gt;, use the &lt;code&gt;--system-site-packages&lt;/code&gt; switch when creating
your virtualenv like this:&lt;/p&gt;

&lt;p&gt;.. code:: python&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ virtualenv --system-site-packages mycoolproject
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can turn off the &lt;code&gt;env&lt;/code&gt; by typing:&lt;/p&gt;

&lt;p&gt;.. code:: python&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ deactivate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running &lt;code&gt;python&lt;/code&gt; after deactivating will use your system installation
of Python again.&lt;/p&gt;

&lt;h2 id=&#34;virtualenvwrapper:ae2a870b41789da9c4f71e0ac6bfd0c3&#34;&gt;Virtualenvwrapper&lt;/h2&gt;

&lt;p&gt;Virtualenv wrapper is a set of extensions for virtualenv. These extensions make your life easier and improve your deveopment workflow. The features of virtualenvwrapper are (taken from project page):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Features&lt;/li&gt;
&lt;li&gt;Organizes all of your virtual environments in one place.&lt;/li&gt;
&lt;li&gt;Wrappers for managing your virtual environments (create, delete, copy).&lt;/li&gt;
&lt;li&gt;Use a single command to switch between environments.&lt;/li&gt;
&lt;li&gt;Tab completion for commands that take a virtual environment as argument.&lt;/li&gt;
&lt;li&gt;User-configurable hooks for all operations (see Per-User Customization).&lt;/li&gt;
&lt;li&gt;Plugin system for more creating sharable extensions (see Extending Virtualenvwrapper).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most importantly virtualenvwrapper stores all your virtual environments in one place and allows you to shift from one environment to another quite easily. You can install it by running the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install virtualenvwrapper
$ export WORKON_HOME=~/Envs
$ mkdir -p $WORKON_HOME
$ source /usr/local/bin/virtualenvwrapper.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can create your first environment by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkvirtualenv venv1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that it installed the virtual environment in the &lt;code&gt;~/Envs&lt;/code&gt; directory by running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(venv1)$ ls $WORKON_HOME
venv1 hook.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can install the software in the usual way by using pip:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(venv1)$ pip install flask
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can create multiple environments and shift from one to another quite easily:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(venv1)$ mkvirtualenv venv2
(venv2)$ workon venv1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can even copy virtual environments:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(venv1)$ cpvirtualenv venv1 dest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above command creates a new virtual environment with the name of &lt;code&gt;dest&lt;/code&gt;. Lastly you can deactivate a virtual environment by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are &lt;strong&gt;a lot&lt;/strong&gt; of other cool virtualenwrapper commands which I did not list here. You can check them out over &lt;a href=&#34;https://virtualenvwrapper.readthedocs.org/en/latest/command_ref.html&#34;&gt;here&lt;/a&gt;. I hope you liked this short intro to virtualenv and virtualenvwrapper.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>